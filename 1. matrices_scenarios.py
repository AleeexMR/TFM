import numpy as np

#Here we have all the matrices used in the first part of the simulation study,
# both those created with the GCC measure and those created with the cophenetic distance.

#In addition, at the end of the script is the function needed to obtain the cophenetic
# distance matrices.

#scenario1
D1 = np.array([[0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [0.75, 0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 0.75, 0., 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 0.75, 0., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0., 0.75,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0.75, 0., 0.75,1.,1.,1.,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 0.75, 0, 0.75,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 0.75, 0, 0.75,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 0.75,0, 0.75,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,0.75,0,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1, 0.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1 ,0.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,1, 0.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,1,0]])
#scenario 2
#gcc
D2 = np.array([[0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [0.75, 0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 0.75, 0., 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 0.75, 0., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0., 0.75,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0.75, 0., 0.75,1.,1.,1.,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 0.75, 0, 0.75,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 0.75, 0, 0.75,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 0.75,0, 0.75,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,0.75,0,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,0.75,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75, 0.,0.75,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,0.75 ,0.,0.75,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,0.75, 0.,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,0.75,0]])
#cd
D2 = np.array([[0., 0.75, 0.75, 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
                [0.75, 0., 0.75, 0.75, 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.],
                [0.75, 0.75, 0., 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
                [0.75, 0.75, 0.75, 0., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0., 0.75,0.75,0.75,0.75,0.75,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0.75, 0., 0.75,0.75,0.75,0.75,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 0.75, 0.75, 0, 0.75,0.75,0.75,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0.75, 0.75, 0.75, 0, 0.75,0.75,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0.75, 0.75, 0.75, 0.75,0, 0.75,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 0.75, 0.75, 0.75, 0.75,0.75,0,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,0.75,0.75,0.75,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75, 0.,0.75,0.75,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75,0.75 ,0.,0.75,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75,0.75,0.75, 0.,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75,0.75,0.75,0.75,0]])

#scenario 3
D3 = np.array([[0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [0.75, 0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 0.75, 0., 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 0.75, 0., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
              [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1, 0.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1 ,0.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,1, 0.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,1,0]])

#scenario 4
D4 = np.array([[0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [0.75, 0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 0.75, 0., 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 0.75, 0., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
              [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,0.75,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75, 0.,0.75,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,0.75 ,0.,0.75,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,0.75, 0.,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,0.75,0]])
D4 = np.array([[0., 0.75, 0.75, 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [0.75, 0., 0.75, 0.75, 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [0.75, 0.75, 0., 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [0.75, 0.75, 0.75, 0., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
              [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,0.75,0.75,0.75,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75, 0.,0.75,0.75,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75,0.75 ,0.,0.75,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75,0.75,0.75, 0.,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75,0.75,0.75,0.75,0]])

#scenario 5
D5 = np.array([[0., 0.19, 0.19, 0.19, 1., 1., 1., 1., 1., 1., 1.,1., 1., 1.,1.],
               [0.19, 0.,0.19,0.19,1., 1., 1., 1., 1. , 1., 1.,1., 1.,1., 1.],
               [0.19, 0.19, 0., 0.19,1.,1.,1.,1., 1., 1., 1.,1., 1., 1., 1.],
               [0.19, 0.19, 0.19, 0.,1., 1., 1., 1., 1., 1.,1.,1., 1., 1., 1.],
               [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,1.,1.,1.,1],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1, 0.,1.,1.,1.],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1 ,0.,1.,1.],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,1, 0.,1.],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,1,0]])

#scenario 6
D6 = np.array([[0., 0.19, 0.19, 0.19, 1., 1., 1., 1., 1., 1., 1.,1., 1., 1.,1.],
               [0.19, 0.,0.19,0.19,1., 1., 1., 1., 1. , 1., 1.,1., 1.,1., 1.],
               [0.19, 0.19, 0., 0.19,1.,1.,1.,1., 1., 1., 1.,1., 1., 1., 1.],
               [0.19, 0.19, 0.19, 0.,1., 1., 1., 1., 1., 1.,1.,1., 1., 1., 1.],
               [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,0.75,1.,1.,1],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75, 0.,0.75,1.,1.],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,0.75 ,0.,0.75,1.],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,0.75, 0.,0.75],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,0.75,0]])
D6 = np.array([[0., 0.19, 0.19, 0.19, 1., 1., 1., 1., 1., 1., 1.,1., 1., 1.,1.],
               [0.19, 0.,0.19,0.19,1., 1., 1., 1., 1. , 1., 1.,1., 1.,1., 1.],
               [0.19, 0.19, 0., 0.19,1.,1.,1.,1., 1., 1., 1.,1., 1., 1., 1.],
               [0.19, 0.19, 0.19, 0.,1., 1., 1., 1., 1., 1.,1.,1., 1., 1., 1.],
               [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,0.75,0.75,0.75,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75, 0.,0.75,0.75,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75,0.75 ,0.,0.75,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75,0.75,0.75, 0.,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75,0.75,0.75,0.75,0]])

#scenario 7
D7 = np.array([[0., 0.19, 0.19, 0.19, 1., 1., 1., 1., 1., 1., 1.,1., 1., 1.,1.],
               [0.19, 0.,0.19,0.19,1., 1., 1., 1., 1. , 1., 1.,1., 1.,1., 1.],
               [0.19, 0.19, 0., 0.19,1.,1.,1.,1., 1., 1., 1.,1., 1., 1., 1.],
               [0.19, 0.19, 0.19, 0.,1., 1., 1., 1., 1., 1.,1.,1., 1., 1., 1.],
               [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0., 0.19, 0.19, 0.19, 0.19],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.19, 0., 0.19, 0.19, 0.19],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.19, 0.19, 0., 0.19, 0.19],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.19, 0.19, 0.19, 0., 0.19],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.19, 0.19, 0.19, 0.19, 0.]])
           
   
def slcd(D):
    n = D.shape[0]  # assuming D is a square matrix
    for h in range(1, n):  # outer loop, goes through n-1 iterations
        CD = D.copy()  # copy the distance matrix to a new matrix CD
        for j in range(n - 1):  # iterate over rows
            for k in range(j + 1, n):  # iterate over columns from j+1 to n-1
                # Update CD[j, k] and CD[k, j] with the maximum distance between the clusters j and k
                CD[j, k] = np.max(D[[j, k], :], axis=0).min()
                CD[k, j] = CD[j, k]  # symmetric matrix
        D = CD  # update D with the newly computed distances
    return D  


# print(slcd(D6))


        
        
        
        
        
        
        
        
        
        
        
