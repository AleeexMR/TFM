import numpy as np
D = np.array([[0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [0.75, 0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 0.75, 0., 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 0.75, 0., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0., 0.75,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0.75, 0., 0.75,1.,1.,1.,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 0.75, 0, 0.75,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 0.75, 0, 0.75,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 0.75,0, 0.75,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,0.75,0,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1, 0.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1 ,0.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,1, 0.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,1,0]])
#scenario 2
D2 = np.array([[0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [0.75, 0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 0.75, 0., 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 0.75, 0., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0., 0.75,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 0.75, 0., 0.75,1.,1.,1.,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 0.75, 0, 0.75,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 0.75, 0, 0.75,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 0.75,0, 0.75,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,0.75,0,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,0.75,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75, 0.,0.75,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,0.75 ,0.,0.75,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,0.75, 0.,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,0.75,0]])

#scenario 3
D3 = np.array([[0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [0.75, 0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 0.75, 0., 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 0.75, 0., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
              [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1, 0.,1.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1 ,0.,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,1, 0.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,1,0]])

#scenario 4
D4 = np.array([[0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [0.75, 0., 0.75, 1., 1., 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 0.75, 0., 0.75, 1., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 0.75, 0., 1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
              [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
              [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,0.75,1.,1.,1],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75, 0.,0.75,1.,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,0.75 ,0.,0.75,1.],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,0.75, 0.,0.75],
              [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,0.75,0]])

#scenario 5
D5 = np.array([[0., 0.19, 0.19, 0.19, 1., 1., 1., 1., 1., 1., 1.,1., 1., 1.,1.],
               [0.19, 0.,0.19,0.19,1., 1., 1., 1., 1. , 1., 1.,1., 1.,1., 1.],
               [0.19, 0.19, 0., 0.19,1.,1.,1.,1., 1., 1., 1.,1., 1., 1., 1.],
               [0.19, 0.19, 0.19, 0.,1., 1., 1., 1., 1., 1.,1.,1., 1., 1., 1.],
               [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,1.,1.,1.,1],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1, 0.,1.,1.,1.],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1 ,0.,1.,1.],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,1, 0.,1.],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,1,0]])

#scenario 6
D6 = np.array([[0., 0.19, 0.19, 0.19, 1., 1., 1., 1., 1., 1., 1.,1., 1., 1.,1.],
               [0.19, 0.,0.19,0.19,1., 1., 1., 1., 1. , 1., 1.,1., 1.,1., 1.],
               [0.19, 0.19, 0., 0.19,1.,1.,1.,1., 1., 1., 1.,1., 1., 1., 1.],
               [0.19, 0.19, 0.19, 0.,1., 1., 1., 1., 1., 1.,1.,1., 1., 1., 1.],
               [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0.,0.75,1.,1.,1],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.75, 0.,0.75,1.,1.],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,0.75 ,0.,0.75,1.],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1,1,0.75, 0.,0.75],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,1.,1.,1.,0.75,0]])

#scenario 7
D7 = np.array([[0., 0.19, 0.19, 0.19, 1., 1., 1., 1., 1., 1., 1.,1., 1., 1.,1.],
               [0.19, 0.,0.19,0.19,1., 1., 1., 1., 1. , 1., 1.,1., 1.,1., 1.],
               [0.19, 0.19, 0., 0.19,1.,1.,1.,1., 1., 1., 1.,1., 1., 1., 1.],
               [0.19, 0.19, 0.19, 0.,1., 1., 1., 1., 1., 1.,1.,1., 1., 1., 1.],
               [1., 1., 1., 1.,0., 0.19, 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0., 0.19, 0.19, 0.19, 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0., 0.19, 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0., 0.19, 0.19,1.,1.,1.,1.,1.],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0., 0.19,1.,1.,1.,1.,1],
               [1., 1., 1., 1.,0.19, 0.19, 0.19, 0.19, 0.19, 0.,1.,1.,1.,1.,1],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1, 0., 0.19, 0.19, 0.19, 0.19],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.19, 0., 0.19, 0.19, 0.19],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.19, 0.19, 0., 0.19, 0.19],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.19, 0.19, 0.19, 0., 0.19],
               [1., 1., 1., 1., 1., 1., 1, 1,1,1,0.19, 0.19, 0.19, 0.19, 0.]])
           
def GCC_sim(x, y, k=1):
    N = len(x)
    M_xy = np.zeros((N - k, 2 * (k + 1)))

    for i in range(k + 1):
        M_xy[:, i] = x[i:N-k+i]
        M_xy[:, i + k + 1] = y[i:N-k+i]

    M_x = M_xy[:, :k+1]
    M_y = M_xy[:, k+1:2*(k+1)]

    R_xy = np.corrcoef(M_xy, rowvar=False)

    if M_x.shape[1] == 1:
        R_x = np.corrcoef(M_x, rowvar=False)
        R_y = np.corrcoef(M_y, rowvar=False)
        GCC = 1 - np.linalg.det(R_xy)**(1 / ((k + 1))) / (R_x**(1 / (k + 1)) * R_y**(1 / (k + 1)))
    else:
        R_x = R_xy[:k+1, :k+1]
        R_y = R_xy[k+1:2*(k+1), k+1:2*(k+1)]
        GCC = 1 - np.linalg.det(R_xy)**(1 / (k + 1)) / (np.linalg.det(R_x)**(1 / (k + 1)) * np.linalg.det(R_y)**(1 / (k + 1)))

    return GCC

def GCCmatrix(serie_0, k=1):
    # Number of series (columns in the input array)
    nSerie = serie_0.shape[1]
    
    # Initialize the dissimilarity matrix with zeros
    DM = np.zeros((nSerie, nSerie))
    
    # Construction of the dissimilarity matrix
    for ii in range(nSerie - 1):
        for jj in range(ii + 1, nSerie):
            g = GCC_sim(serie_0[:, ii], serie_0[:, jj], k)
            DM[ii, jj] = 1 - g
            DM[jj, ii] = 1 - g
    
    return DM

from scipy.stats import multivariate_normal

def factoSimul(TL=100, PPvector=[100, 100, 100], scenario="scenario1"):
    R = 3  # Number of groups
    rs = [3, 3, 3]  # Number of factors in each group
    
    # Total number of series
    PP = sum(PPvector)
    
    # Generating the group indices
    P = np.concatenate([np.full(PPvector[i], i+1) for i in range(R)])
    
    # Factors
    F1 = np.random.normal(1, 1, (TL, 3))
    F2 = np.random.normal(2, 1, (TL, 3))
    F3 = np.random.normal(3, 1, (TL, 3))
    
    # Factor loadings
    L1 = np.random.normal(0, 1, (int(PP/3), 3))
    L2 = np.random.normal(0, np.sqrt(2), (int(PP/3), 3))
    L3 = np.random.normal(0, np.sqrt(3), (int(PP/3), 3))
    
    # Time series
    xData1 = F1 @ L1.T
    xData2 = F2 @ L2.T
    xData3 = F3 @ L3.T
    xData = np.hstack((xData1, xData2, xData3))
    
    if scenario == "scenario1":
        # error DFM
        Error = np.random.normal(1, 0.1, (TL, PP))
        zData = xData + Error
        
    elif scenario == 'scenario2':
        covariance = np.zeros((PP, PP))
        for i in range(PP):
            for j in range(i, PP):
                covariance[i, j] = covariance[j, i] = 0.3 ** abs(i - j)
        
        error1 = multivariate_normal.rvs(mean=np.zeros(PP), cov=covariance, size=TL)
        error2 = multivariate_normal.rvs(mean=np.zeros(PP), cov=covariance, size=TL)
        delta = np.ones(PP)
        delta[::2] = 0  # Apply delta to even indices
        Error = 0.9 * error1 + delta * error2
        zData = xData + np.sqrt(0.1) * Error
    
    elif scenario == 'scenario3':
        covariance = np.zeros((PP, PP))
        for i in range(PP):
            for j in range(i, PP):
                covariance[i, j] = covariance[j, i] = 0.3 ** abs(i - j)
        
        error1 = multivariate_normal.rvs(mean=np.zeros(PP), cov=covariance, size=TL)
        Error = np.zeros((TL, PP))
        Error[0, :] = error1[0, :]
        for i in range(1, TL):
            Error[i, :] = 0.2 * Error[i-1, :] + error1[i, :]
        
        zData = xData + np.sqrt(0.1) * Error

    return zData

xx1 = factoSimul()
DM1 = GCCmatrix(xx1, k = 1)
   
def slcd(D):
    n = D.shape[0]  # assuming D is a square matrix
    for h in range(1, n):  # outer loop, goes through n-1 iterations
        CD = D.copy()  # copy the distance matrix to a new matrix CD
        for j in range(n - 1):  # iterate over rows
            for k in range(j + 1, n):  # iterate over columns from j+1 to n-1
                # Update CD[j, k] and CD[k, j] with the maximum distance between the clusters j and k
                CD[j, k] = np.max(D[[j, k], :], axis=0).min()
                CD[k, j] = CD[j, k]  # symmetric matrix
        D = CD  # update D with the newly computed distances
    return D  

print(slcd(DM1))    
        
D2_cd = np.array([
    [0.0, 0.75, 0.75, 0.75, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [0.75, 0.0, 0.75, 0.75, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [0.75, 0.75, 0.0, 0.75, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [0.75, 0.75, 0.75, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 0.0, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 0.75, 0.0, 0.75, 0.75, 0.75, 0.75, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 0.75, 0.75, 0.0, 0.75, 0.75, 0.75, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 0.75, 0.75, 0.75, 0.0, 0.75, 0.75, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 0.75, 0.75, 0.75, 0.75, 0.0, 0.75, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 0.75, 0.75, 0.75, 0.75, 0.75, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.75, 0.75, 0.75, 0.75],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.75, 0.0, 0.75, 0.75, 0.75],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.75, 0.75, 0.0, 0.75, 0.75],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.75, 0.75, 0.75, 0.0, 0.75],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.75, 0.75, 0.75, 0.75, 0.0]
])
        
        
        
        
        
        
        
        
        
        
        
